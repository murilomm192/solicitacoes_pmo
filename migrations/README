https://github.com/tiangolo/sqlmodel/issues/85

Install and setup
Install and initiallise alembic
pip install alembic
alembic init migrations
Note: Make sure that there are __init__.py files in the root project directory and in the models directory (if modules aren't in your project root directory)

Update the autogenerated alembic files
Changes to alembic.ini
Update the alembic.ini to point to your database driver and location, so the whole file should look like this:

[alembic]
# path to migration scripts
script_location = migrations

prepend_sys_path = .                            # New

# database driver and location
sqlalchemy.url = sqlite:///local-database.db    # Updated

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
Changes to migrations/script.py.mako
Update the script.py.mako file to include "import sqlmode", so the whole file should look like this:

"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel                                 # New
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    ${upgrades if upgrades else "pass"}


def downgrade():
    ${downgrades if downgrades else "pass"}
Changes to migrations/env.py
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

from sqlmodel import SQLModel                   # New

config = context.config
fileConfig(config.config_file_name)

# Model / Schema imports
from models.hero import Hero                    # New (be sure to import all models you need migrated)

target_metadata = SQLModel.metadata             # Updated


def run_migrations_offline():
    # etc...
Note: You will need to import models that you want alembic to watch and migrate for.
(If you know a way to automatically detect and add these imports, please let me know. Maybe something like a recursive
import that gets each class in each file in a "models" directory.)

Run migration
Initial migration
Create your first autogenerated migration.
Note: Running alembic as python -m alembic resolves an issue with PYTHONPATH and not having some imports working

python -m alembic revision --autogenerate -m "Initial Migration"
Upgrade the database with the newly created migration script in migrations/versions/

python -m alembic upgrade head
Update a model and the database
Update the model
Example of updating a SQLModel

class HeroBase(SQLModel):
    name: str
    secret_name: str
    age: Optional[int] = None
    power: Optional[str] = None                # New


class Hero(HeroBase, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
Note: Be sure that the new class variable is either Optional or has a default value. This is so alembic can back
populate entries in the database if needed.

Autogenerate a new migration
python -m alembic revision --autogenerate -m "Add power to Hero model"
Apply the migration
python -m alembic upgrade head
All done
And Bob's your Aunty. A fairly simplistic way of using SQLModel with alembic :)